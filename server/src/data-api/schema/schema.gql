#OUTPUT TYPES
enum ApproachDetailCategory {
  NOTE
  EXPLANATION
  WARNING
}

interface SearchResultItem{
  id: ID!
  content: String!
}

        #Models
type User{
  id: ID!
  createdAt: String!
  username: String!
  name: String
  taskList: [Task!]!

#more fields for a User object
}
type Task implements SearchResultItem{
  id: ID!
  createdAt: String!
  content: String!
  approachCount: Int!
  author: User!
  approachList: [Approach!]!
  tags: [String!]!

# More fields for a task object
}

type Approach implements SearchResultItem{
  id: ID!
  createdAt:  String!
  content:  String!
  task: Task!
  voteCount: Int!
  author: User!
  detailList: [ApproachDetail!]!

# More fields for an Approach object
}

type ApproachDetail {
  content: String!
  category: ApproachDetailCategory!
  
  # More fields for an approach detail record
}

type UserError {
  message: String!
}

type UserPayload {
  errors: [UserError!]!
  user: User
  authToken:  String
}

type UserDeletePayload {
  errors: [UserError!]!
  deletedUserId: ID
}

type TaskPayload {
  errors: [userError!]!
  task: Task
}

type ApproachPayload {
  errors: [UserError!]!
  approach: Approach
}

type Query{
  taskMainList: [Task!] # A list of non-null objects from the task model
  search(term: String!):  [SearchResultItem!]
  taskInfo(id:  ID!): Task
  viewer: User
  # More query root fields
}

type Mutation {
  userCreate(input: UserInput!):UserPayload!
  userLogin(input: AuthInput!): UserPayload!
  userDelete: UserDeletePayload!
  taskCreate(input: TaskInput): TaskPayload!
  approachCreate(
    taskId: ID!
    input: ApproachInput!
  ):  ApproachPayload!
  approachVote(
    approachID: ID!
    Input:  ApproachVoteInput!
  ):  ApproachPayload!

  # More mutations
}

# Define Input types
input UserInput {
  username: String!
  password: String!
  firsName: String
  lastName: String
}

input AuthInput {
  username: String!
  password: String!
}

input TaskInput {
  content: String!
  tags: [String!]!
  isPrivate: Boolean!
}

input ApproachDetailInput {
  content: String!
  category: ApproachDetailCategory!
}

input ApproachInput {
  content: String!
  detailList:[ApproachDetailInput!]!
}

input ApproachVoteInput{
  """ true for up-vote and false for down-vote"""
  up: Boolean!
}

type Subscription {
  voteChanged(taskId: ID!): Approach
  taskMainListChanged: [Task!]!
}

#QUERIES  / pseudo-code-style operations
query{
  taskMainList{
    id
    content

    # Fields on a task object
  }
}

query{
  search(item;  "something"){
    type: __typename
    id
    content
    ...on Task{
      approachCount
    }
    ...on Approach{
      task{
        id
        content
      }
    }
    
  }
}

query{
  taskInfo(
    # arguments to identify a task record
  ){      
      # Fields under a task record
    author{
      # Fields under a user record
    }

    approachList{
      # Fields under an approach record

      author{
        # Fields under a user record
      }

      detailList{
        # Fields under an approach detail record
      }
    }
  }
}

query{
  me(
    # Arguments to validate user access
  ){
    taskList{
      # Fields under a task record
    }
  }
}

query{
  userCreate(
    #  Input for a new User record
  ){
    # fail / success response
  }
}

query{
  userLogin(
    # Input to identify a User record
  ){
    # fail / success response
  }
}